'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="sweetgoals")>  _
Partial Public Class sgdataDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertUser(instance As User)
    End Sub
  Partial Private Sub UpdateUser(instance As User)
    End Sub
  Partial Private Sub DeleteUser(instance As User)
    End Sub
  Partial Private Sub Insertsupporter(instance As supporter)
    End Sub
  Partial Private Sub Updatesupporter(instance As supporter)
    End Sub
  Partial Private Sub Deletesupporter(instance As supporter)
    End Sub
  Partial Private Sub InsertMembershipdb(instance As Membershipdb)
    End Sub
  Partial Private Sub UpdateMembershipdb(instance As Membershipdb)
    End Sub
  Partial Private Sub DeleteMembershipdb(instance As Membershipdb)
    End Sub
  Partial Private Sub Insertunsubscribe(instance As unsubscribe)
    End Sub
  Partial Private Sub Updateunsubscribe(instance As unsubscribe)
    End Sub
  Partial Private Sub Deleteunsubscribe(instance As unsubscribe)
    End Sub
  Partial Private Sub Insertgoalreason(instance As goalreason)
    End Sub
  Partial Private Sub Updategoalreason(instance As goalreason)
    End Sub
  Partial Private Sub Deletegoalreason(instance As goalreason)
    End Sub
  Partial Private Sub InsertgoalSupport(instance As goalSupport)
    End Sub
  Partial Private Sub UpdategoalSupport(instance As goalSupport)
    End Sub
  Partial Private Sub DeletegoalSupport(instance As goalSupport)
    End Sub
  Partial Private Sub InsertnoSupport(instance As noSupport)
    End Sub
  Partial Private Sub UpdatenoSupport(instance As noSupport)
    End Sub
  Partial Private Sub DeletenoSupport(instance As noSupport)
    End Sub
  Partial Private Sub InsertaskSupport(instance As askSupport)
    End Sub
  Partial Private Sub UpdateaskSupport(instance As askSupport)
    End Sub
  Partial Private Sub DeleteaskSupport(instance As askSupport)
    End Sub
  Partial Private Sub Insertemailtrack(instance As emailtrack)
    End Sub
  Partial Private Sub Updateemailtrack(instance As emailtrack)
    End Sub
  Partial Private Sub Deleteemailtrack(instance As emailtrack)
    End Sub
  Partial Private Sub Insertachievement(instance As achievement)
    End Sub
  Partial Private Sub Updateachievement(instance As achievement)
    End Sub
  Partial Private Sub Deleteachievement(instance As achievement)
    End Sub
  Partial Private Sub Insertactivity(instance As activity)
    End Sub
  Partial Private Sub Updateactivity(instance As activity)
    End Sub
  Partial Private Sub Deleteactivity(instance As activity)
    End Sub
  Partial Private Sub InsertactivityFieldData(instance As activityFieldData)
    End Sub
  Partial Private Sub UpdateactivityFieldData(instance As activityFieldData)
    End Sub
  Partial Private Sub DeleteactivityFieldData(instance As activityFieldData)
    End Sub
  Partial Private Sub InsertactivityResponse(instance As activityResponse)
    End Sub
  Partial Private Sub UpdateactivityResponse(instance As activityResponse)
    End Sub
  Partial Private Sub DeleteactivityResponse(instance As activityResponse)
    End Sub
  Partial Private Sub InsertachievementList(instance As achievementList)
    End Sub
  Partial Private Sub UpdateachievementList(instance As achievementList)
    End Sub
  Partial Private Sub DeleteachievementList(instance As achievementList)
    End Sub
  Partial Private Sub InsertactivityPicture(instance As activityPicture)
    End Sub
  Partial Private Sub UpdateactivityPicture(instance As activityPicture)
    End Sub
  Partial Private Sub DeleteactivityPicture(instance As activityPicture)
    End Sub
  Partial Private Sub InsertgoalHistory(instance As goalHistory)
    End Sub
  Partial Private Sub UpdategoalHistory(instance As goalHistory)
    End Sub
  Partial Private Sub DeletegoalHistory(instance As goalHistory)
    End Sub
  Partial Private Sub InsertactivityField(instance As activityField)
    End Sub
  Partial Private Sub UpdateactivityField(instance As activityField)
    End Sub
  Partial Private Sub DeleteactivityField(instance As activityField)
    End Sub
  Partial Private Sub InsertactivityFieldsHistory(instance As activityFieldsHistory)
    End Sub
  Partial Private Sub UpdateactivityFieldsHistory(instance As activityFieldsHistory)
    End Sub
  Partial Private Sub DeleteactivityFieldsHistory(instance As activityFieldsHistory)
    End Sub
  Partial Private Sub Insertgoal(instance As goal)
    End Sub
  Partial Private Sub Updategoal(instance As goal)
    End Sub
  Partial Private Sub Deletegoal(instance As goal)
    End Sub
  Partial Private Sub InsertactivityTextControl(instance As activityTextControl)
    End Sub
  Partial Private Sub UpdateactivityTextControl(instance As activityTextControl)
    End Sub
  Partial Private Sub DeleteactivityTextControl(instance As activityTextControl)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("sweetgoalsConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Users() As System.Data.Linq.Table(Of User)
		Get
			Return Me.GetTable(Of User)
		End Get
	End Property
	
	Public ReadOnly Property supporters() As System.Data.Linq.Table(Of supporter)
		Get
			Return Me.GetTable(Of supporter)
		End Get
	End Property
	
	Public ReadOnly Property Membershipdbs() As System.Data.Linq.Table(Of Membershipdb)
		Get
			Return Me.GetTable(Of Membershipdb)
		End Get
	End Property
	
	Public ReadOnly Property unsubscribes() As System.Data.Linq.Table(Of unsubscribe)
		Get
			Return Me.GetTable(Of unsubscribe)
		End Get
	End Property
	
	Public ReadOnly Property goalreasons() As System.Data.Linq.Table(Of goalreason)
		Get
			Return Me.GetTable(Of goalreason)
		End Get
	End Property
	
	Public ReadOnly Property goalSupports() As System.Data.Linq.Table(Of goalSupport)
		Get
			Return Me.GetTable(Of goalSupport)
		End Get
	End Property
	
	Public ReadOnly Property noSupports() As System.Data.Linq.Table(Of noSupport)
		Get
			Return Me.GetTable(Of noSupport)
		End Get
	End Property
	
	Public ReadOnly Property askSupports() As System.Data.Linq.Table(Of askSupport)
		Get
			Return Me.GetTable(Of askSupport)
		End Get
	End Property
	
	Public ReadOnly Property emailtracks() As System.Data.Linq.Table(Of emailtrack)
		Get
			Return Me.GetTable(Of emailtrack)
		End Get
	End Property
	
	Public ReadOnly Property achievements() As System.Data.Linq.Table(Of achievement)
		Get
			Return Me.GetTable(Of achievement)
		End Get
	End Property
	
	Public ReadOnly Property activities() As System.Data.Linq.Table(Of activity)
		Get
			Return Me.GetTable(Of activity)
		End Get
	End Property
	
	Public ReadOnly Property activityFieldDatas() As System.Data.Linq.Table(Of activityFieldData)
		Get
			Return Me.GetTable(Of activityFieldData)
		End Get
	End Property
	
	Public ReadOnly Property activityResponses() As System.Data.Linq.Table(Of activityResponse)
		Get
			Return Me.GetTable(Of activityResponse)
		End Get
	End Property
	
	Public ReadOnly Property achievementLists() As System.Data.Linq.Table(Of achievementList)
		Get
			Return Me.GetTable(Of achievementList)
		End Get
	End Property
	
	Public ReadOnly Property activityPictures() As System.Data.Linq.Table(Of activityPicture)
		Get
			Return Me.GetTable(Of activityPicture)
		End Get
	End Property
	
	Public ReadOnly Property goalHistories() As System.Data.Linq.Table(Of goalHistory)
		Get
			Return Me.GetTable(Of goalHistory)
		End Get
	End Property
	
	Public ReadOnly Property activityFields() As System.Data.Linq.Table(Of activityField)
		Get
			Return Me.GetTable(Of activityField)
		End Get
	End Property
	
	Public ReadOnly Property activityFieldsHistories() As System.Data.Linq.Table(Of activityFieldsHistory)
		Get
			Return Me.GetTable(Of activityFieldsHistory)
		End Get
	End Property
	
	Public ReadOnly Property goals() As System.Data.Linq.Table(Of goal)
		Get
			Return Me.GetTable(Of goal)
		End Get
	End Property
	
	Public ReadOnly Property activityTextControls() As System.Data.Linq.Table(Of activityTextControl)
		Get
			Return Me.GetTable(Of activityTextControl)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Users")>  _
Partial Public Class User
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationId As System.Guid
	
	Private _UserId As System.Guid
	
	Private _UserName As String
	
	Private _IsAnonymous As Boolean
	
	Private _LastActivityDate As Date
	
	Private _Membershipdb As EntityRef(Of Membershipdb)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnIsAnonymousChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsAnonymousChanged()
    End Sub
    Partial Private Sub OnLastActivityDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastActivityDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Membershipdb = CType(Nothing, EntityRef(Of Membershipdb))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationId() As System.Guid
		Get
			Return Me._ApplicationId
		End Get
		Set
			If ((Me._ApplicationId = value)  _
						= false) Then
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserId() As System.Guid
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAnonymous", DbType:="Bit NOT NULL")>  _
	Public Property IsAnonymous() As Boolean
		Get
			Return Me._IsAnonymous
		End Get
		Set
			If ((Me._IsAnonymous = value)  _
						= false) Then
				Me.OnIsAnonymousChanging(value)
				Me.SendPropertyChanging
				Me._IsAnonymous = value
				Me.SendPropertyChanged("IsAnonymous")
				Me.OnIsAnonymousChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastActivityDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastActivityDate() As Date
		Get
			Return Me._LastActivityDate
		End Get
		Set
			If ((Me._LastActivityDate = value)  _
						= false) Then
				Me.OnLastActivityDateChanging(value)
				Me.SendPropertyChanging
				Me._LastActivityDate = value
				Me.SendPropertyChanged("LastActivityDate")
				Me.OnLastActivityDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Membershipdb", Storage:="_Membershipdb", ThisKey:="UserId", OtherKey:="UserId", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property Membershipdb() As Membershipdb
		Get
			Return Me._Membershipdb.Entity
		End Get
		Set
			Dim previousValue As Membershipdb = Me._Membershipdb.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Membershipdb.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Membershipdb.Entity = Nothing
					previousValue.User = Nothing
				End If
				Me._Membershipdb.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.User = Me
				End If
				Me.SendPropertyChanged("Membershipdb")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="bobpar.supporters")>  _
Partial Public Class supporter
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _supportNumber As Long
	
	Private _userName As String
	
	Private _supportName As String
	
	Private _supportEmail As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnsupportNumberChanging(value As Long)
    End Sub
    Partial Private Sub OnsupportNumberChanged()
    End Sub
    Partial Private Sub OnuserNameChanging(value As String)
    End Sub
    Partial Private Sub OnuserNameChanged()
    End Sub
    Partial Private Sub OnsupportNameChanging(value As String)
    End Sub
    Partial Private Sub OnsupportNameChanged()
    End Sub
    Partial Private Sub OnsupportEmailChanging(value As String)
    End Sub
    Partial Private Sub OnsupportEmailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supportNumber", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property supportNumber() As Long
		Get
			Return Me._supportNumber
		End Get
		Set
			If ((Me._supportNumber = value)  _
						= false) Then
				Me.OnsupportNumberChanging(value)
				Me.SendPropertyChanging
				Me._supportNumber = value
				Me.SendPropertyChanged("supportNumber")
				Me.OnsupportNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me.OnuserNameChanging(value)
				Me.SendPropertyChanging
				Me._userName = value
				Me.SendPropertyChanged("userName")
				Me.OnuserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supportName", DbType:="NVarChar(50)")>  _
	Public Property supportName() As String
		Get
			Return Me._supportName
		End Get
		Set
			If (String.Equals(Me._supportName, value) = false) Then
				Me.OnsupportNameChanging(value)
				Me.SendPropertyChanging
				Me._supportName = value
				Me.SendPropertyChanged("supportName")
				Me.OnsupportNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supportEmail", DbType:="NVarChar(50)")>  _
	Public Property supportEmail() As String
		Get
			Return Me._supportEmail
		End Get
		Set
			If (String.Equals(Me._supportEmail, value) = false) Then
				Me.OnsupportEmailChanging(value)
				Me.SendPropertyChanging
				Me._supportEmail = value
				Me.SendPropertyChanged("supportEmail")
				Me.OnsupportEmailChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Memberships")>  _
Partial Public Class Membershipdb
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationId As System.Guid
	
	Private _UserId As System.Guid
	
	Private _Password As String
	
	Private _PasswordFormat As Integer
	
	Private _PasswordSalt As String
	
	Private _Email As String
	
	Private _PasswordQuestion As String
	
	Private _PasswordAnswer As String
	
	Private _IsApproved As Boolean
	
	Private _IsLockedOut As Boolean
	
	Private _CreateDate As Date
	
	Private _LastLoginDate As Date
	
	Private _LastPasswordChangedDate As Date
	
	Private _LastLockoutDate As Date
	
	Private _FailedPasswordAttemptCount As Integer
	
	Private _FailedPasswordAttemptWindowStart As Date
	
	Private _FailedPasswordAnswerAttemptCount As Integer
	
	Private _FailedPasswordAnswerAttemptWindowsStart As Date
	
	Private _Comment As String
	
	Private _User As EntityRef(Of User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnPasswordFormatChanging(value As Integer)
    End Sub
    Partial Private Sub OnPasswordFormatChanged()
    End Sub
    Partial Private Sub OnPasswordSaltChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordSaltChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnPasswordQuestionChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordQuestionChanged()
    End Sub
    Partial Private Sub OnPasswordAnswerChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordAnswerChanged()
    End Sub
    Partial Private Sub OnIsApprovedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsApprovedChanged()
    End Sub
    Partial Private Sub OnIsLockedOutChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsLockedOutChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnLastLoginDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastLoginDateChanged()
    End Sub
    Partial Private Sub OnLastPasswordChangedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastPasswordChangedDateChanged()
    End Sub
    Partial Private Sub OnLastLockoutDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastLockoutDateChanged()
    End Sub
    Partial Private Sub OnFailedPasswordAttemptCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnFailedPasswordAttemptCountChanged()
    End Sub
    Partial Private Sub OnFailedPasswordAttemptWindowStartChanging(value As Date)
    End Sub
    Partial Private Sub OnFailedPasswordAttemptWindowStartChanged()
    End Sub
    Partial Private Sub OnFailedPasswordAnswerAttemptCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnFailedPasswordAnswerAttemptCountChanged()
    End Sub
    Partial Private Sub OnFailedPasswordAnswerAttemptWindowsStartChanging(value As Date)
    End Sub
    Partial Private Sub OnFailedPasswordAnswerAttemptWindowsStartChanged()
    End Sub
    Partial Private Sub OnCommentChanging(value As String)
    End Sub
    Partial Private Sub OnCommentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._User = CType(Nothing, EntityRef(Of User))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationId() As System.Guid
		Get
			Return Me._ApplicationId
		End Get
		Set
			If ((Me._ApplicationId = value)  _
						= false) Then
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserId() As System.Guid
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				If Me._User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordFormat", DbType:="Int NOT NULL")>  _
	Public Property PasswordFormat() As Integer
		Get
			Return Me._PasswordFormat
		End Get
		Set
			If ((Me._PasswordFormat = value)  _
						= false) Then
				Me.OnPasswordFormatChanging(value)
				Me.SendPropertyChanging
				Me._PasswordFormat = value
				Me.SendPropertyChanged("PasswordFormat")
				Me.OnPasswordFormatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordSalt", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property PasswordSalt() As String
		Get
			Return Me._PasswordSalt
		End Get
		Set
			If (String.Equals(Me._PasswordSalt, value) = false) Then
				Me.OnPasswordSaltChanging(value)
				Me.SendPropertyChanging
				Me._PasswordSalt = value
				Me.SendPropertyChanged("PasswordSalt")
				Me.OnPasswordSaltChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(256)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordQuestion", DbType:="NVarChar(256)")>  _
	Public Property PasswordQuestion() As String
		Get
			Return Me._PasswordQuestion
		End Get
		Set
			If (String.Equals(Me._PasswordQuestion, value) = false) Then
				Me.OnPasswordQuestionChanging(value)
				Me.SendPropertyChanging
				Me._PasswordQuestion = value
				Me.SendPropertyChanged("PasswordQuestion")
				Me.OnPasswordQuestionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordAnswer", DbType:="NVarChar(128)")>  _
	Public Property PasswordAnswer() As String
		Get
			Return Me._PasswordAnswer
		End Get
		Set
			If (String.Equals(Me._PasswordAnswer, value) = false) Then
				Me.OnPasswordAnswerChanging(value)
				Me.SendPropertyChanging
				Me._PasswordAnswer = value
				Me.SendPropertyChanged("PasswordAnswer")
				Me.OnPasswordAnswerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsApproved", DbType:="Bit NOT NULL")>  _
	Public Property IsApproved() As Boolean
		Get
			Return Me._IsApproved
		End Get
		Set
			If ((Me._IsApproved = value)  _
						= false) Then
				Me.OnIsApprovedChanging(value)
				Me.SendPropertyChanging
				Me._IsApproved = value
				Me.SendPropertyChanged("IsApproved")
				Me.OnIsApprovedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsLockedOut", DbType:="Bit NOT NULL")>  _
	Public Property IsLockedOut() As Boolean
		Get
			Return Me._IsLockedOut
		End Get
		Set
			If ((Me._IsLockedOut = value)  _
						= false) Then
				Me.OnIsLockedOutChanging(value)
				Me.SendPropertyChanging
				Me._IsLockedOut = value
				Me.SendPropertyChanged("IsLockedOut")
				Me.OnIsLockedOutChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLoginDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastLoginDate() As Date
		Get
			Return Me._LastLoginDate
		End Get
		Set
			If ((Me._LastLoginDate = value)  _
						= false) Then
				Me.OnLastLoginDateChanging(value)
				Me.SendPropertyChanging
				Me._LastLoginDate = value
				Me.SendPropertyChanged("LastLoginDate")
				Me.OnLastLoginDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastPasswordChangedDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastPasswordChangedDate() As Date
		Get
			Return Me._LastPasswordChangedDate
		End Get
		Set
			If ((Me._LastPasswordChangedDate = value)  _
						= false) Then
				Me.OnLastPasswordChangedDateChanging(value)
				Me.SendPropertyChanging
				Me._LastPasswordChangedDate = value
				Me.SendPropertyChanged("LastPasswordChangedDate")
				Me.OnLastPasswordChangedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLockoutDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastLockoutDate() As Date
		Get
			Return Me._LastLockoutDate
		End Get
		Set
			If ((Me._LastLockoutDate = value)  _
						= false) Then
				Me.OnLastLockoutDateChanging(value)
				Me.SendPropertyChanging
				Me._LastLockoutDate = value
				Me.SendPropertyChanged("LastLockoutDate")
				Me.OnLastLockoutDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAttemptCount", DbType:="Int NOT NULL")>  _
	Public Property FailedPasswordAttemptCount() As Integer
		Get
			Return Me._FailedPasswordAttemptCount
		End Get
		Set
			If ((Me._FailedPasswordAttemptCount = value)  _
						= false) Then
				Me.OnFailedPasswordAttemptCountChanging(value)
				Me.SendPropertyChanging
				Me._FailedPasswordAttemptCount = value
				Me.SendPropertyChanged("FailedPasswordAttemptCount")
				Me.OnFailedPasswordAttemptCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAttemptWindowStart", DbType:="DateTime NOT NULL")>  _
	Public Property FailedPasswordAttemptWindowStart() As Date
		Get
			Return Me._FailedPasswordAttemptWindowStart
		End Get
		Set
			If ((Me._FailedPasswordAttemptWindowStart = value)  _
						= false) Then
				Me.OnFailedPasswordAttemptWindowStartChanging(value)
				Me.SendPropertyChanging
				Me._FailedPasswordAttemptWindowStart = value
				Me.SendPropertyChanged("FailedPasswordAttemptWindowStart")
				Me.OnFailedPasswordAttemptWindowStartChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAnswerAttemptCount", DbType:="Int NOT NULL")>  _
	Public Property FailedPasswordAnswerAttemptCount() As Integer
		Get
			Return Me._FailedPasswordAnswerAttemptCount
		End Get
		Set
			If ((Me._FailedPasswordAnswerAttemptCount = value)  _
						= false) Then
				Me.OnFailedPasswordAnswerAttemptCountChanging(value)
				Me.SendPropertyChanging
				Me._FailedPasswordAnswerAttemptCount = value
				Me.SendPropertyChanged("FailedPasswordAnswerAttemptCount")
				Me.OnFailedPasswordAnswerAttemptCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAnswerAttemptWindowsStart", DbType:="DateTime NOT NULL")>  _
	Public Property FailedPasswordAnswerAttemptWindowsStart() As Date
		Get
			Return Me._FailedPasswordAnswerAttemptWindowsStart
		End Get
		Set
			If ((Me._FailedPasswordAnswerAttemptWindowsStart = value)  _
						= false) Then
				Me.OnFailedPasswordAnswerAttemptWindowsStartChanging(value)
				Me.SendPropertyChanging
				Me._FailedPasswordAnswerAttemptWindowsStart = value
				Me.SendPropertyChanged("FailedPasswordAnswerAttemptWindowsStart")
				Me.OnFailedPasswordAnswerAttemptWindowsStartChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comment", DbType:="NVarChar(256)")>  _
	Public Property Comment() As String
		Get
			Return Me._Comment
		End Get
		Set
			If (String.Equals(Me._Comment, value) = false) Then
				Me.OnCommentChanging(value)
				Me.SendPropertyChanging
				Me._Comment = value
				Me.SendPropertyChanged("Comment")
				Me.OnCommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Membershipdb", Storage:="_User", ThisKey:="UserId", OtherKey:="UserId", IsForeignKey:=true)>  _
	Public Property User() As User
		Get
			Return Me._User.Entity
		End Get
		Set
			Dim previousValue As User = Me._User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._User.Entity = Nothing
					previousValue.Membershipdb = Nothing
				End If
				Me._User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Membershipdb = Me
					Me._UserId = value.UserId
				Else
					Me._UserId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("User")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="bobpar.unsubscribe")>  _
Partial Public Class unsubscribe
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _emailNum As Long
	
	Private _email As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnemailNumChanging(value As Long)
    End Sub
    Partial Private Sub OnemailNumChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_emailNum", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property emailNum() As Long
		Get
			Return Me._emailNum
		End Get
		Set
			If ((Me._emailNum = value)  _
						= false) Then
				Me.OnemailNumChanging(value)
				Me.SendPropertyChanging
				Me._emailNum = value
				Me.SendPropertyChanged("emailNum")
				Me.OnemailNumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="NVarChar(50)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="bobpar.goalreasons")>  _
Partial Public Class goalreason
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _reasonnum As Long
	
	Private _goalnum As System.Nullable(Of Long)
	
	Private _reason As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnreasonnumChanging(value As Long)
    End Sub
    Partial Private Sub OnreasonnumChanged()
    End Sub
    Partial Private Sub OngoalnumChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OngoalnumChanged()
    End Sub
    Partial Private Sub OnreasonChanging(value As String)
    End Sub
    Partial Private Sub OnreasonChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reasonnum", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property reasonnum() As Long
		Get
			Return Me._reasonnum
		End Get
		Set
			If ((Me._reasonnum = value)  _
						= false) Then
				Me.OnreasonnumChanging(value)
				Me.SendPropertyChanging
				Me._reasonnum = value
				Me.SendPropertyChanged("reasonnum")
				Me.OnreasonnumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_goalnum", DbType:="BigInt")>  _
	Public Property goalnum() As System.Nullable(Of Long)
		Get
			Return Me._goalnum
		End Get
		Set
			If (Me._goalnum.Equals(value) = false) Then
				Me.OngoalnumChanging(value)
				Me.SendPropertyChanging
				Me._goalnum = value
				Me.SendPropertyChanged("goalnum")
				Me.OngoalnumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reason", DbType:="NVarChar(MAX)")>  _
	Public Property reason() As String
		Get
			Return Me._reason
		End Get
		Set
			If (String.Equals(Me._reason, value) = false) Then
				Me.OnreasonChanging(value)
				Me.SendPropertyChanging
				Me._reason = value
				Me.SendPropertyChanged("reason")
				Me.OnreasonChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="bobpar.goalSupport")>  _
Partial Public Class goalSupport
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _number As Long
	
	Private _goalNum As System.Nullable(Of Long)
	
	Private _sEmail As String
	
	Private _goal As EntityRef(Of goal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnnumberChanging(value As Long)
    End Sub
    Partial Private Sub OnnumberChanged()
    End Sub
    Partial Private Sub OngoalNumChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OngoalNumChanged()
    End Sub
    Partial Private Sub OnsEmailChanging(value As String)
    End Sub
    Partial Private Sub OnsEmailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._goal = CType(Nothing, EntityRef(Of goal))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_number", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property number() As Long
		Get
			Return Me._number
		End Get
		Set
			If ((Me._number = value)  _
						= false) Then
				Me.OnnumberChanging(value)
				Me.SendPropertyChanging
				Me._number = value
				Me.SendPropertyChanged("number")
				Me.OnnumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_goalNum", DbType:="BigInt")>  _
	Public Property goalNum() As System.Nullable(Of Long)
		Get
			Return Me._goalNum
		End Get
		Set
			If (Me._goalNum.Equals(value) = false) Then
				If Me._goal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OngoalNumChanging(value)
				Me.SendPropertyChanging
				Me._goalNum = value
				Me.SendPropertyChanged("goalNum")
				Me.OngoalNumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sEmail", DbType:="NVarChar(50)")>  _
	Public Property sEmail() As String
		Get
			Return Me._sEmail
		End Get
		Set
			If (String.Equals(Me._sEmail, value) = false) Then
				Me.OnsEmailChanging(value)
				Me.SendPropertyChanging
				Me._sEmail = value
				Me.SendPropertyChanged("sEmail")
				Me.OnsEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="goal_goalSupport", Storage:="_goal", ThisKey:="goalNum", OtherKey:="goalNumber", IsForeignKey:=true)>  _
	Public Property goal() As goal
		Get
			Return Me._goal.Entity
		End Get
		Set
			Dim previousValue As goal = Me._goal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._goal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._goal.Entity = Nothing
					previousValue.goalSupports.Remove(Me)
				End If
				Me._goal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.goalSupports.Add(Me)
					Me._goalNum = value.goalNumber
				Else
					Me._goalNum = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("goal")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="bobpar.noSupport")>  _
Partial Public Class noSupport
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _number As Long
	
	Private _goalNum As System.Nullable(Of Long)
	
	Private _sEmail As String
	
	Private _goal As EntityRef(Of goal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnnumberChanging(value As Long)
    End Sub
    Partial Private Sub OnnumberChanged()
    End Sub
    Partial Private Sub OngoalNumChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OngoalNumChanged()
    End Sub
    Partial Private Sub OnsEmailChanging(value As String)
    End Sub
    Partial Private Sub OnsEmailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._goal = CType(Nothing, EntityRef(Of goal))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_number", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property number() As Long
		Get
			Return Me._number
		End Get
		Set
			If ((Me._number = value)  _
						= false) Then
				Me.OnnumberChanging(value)
				Me.SendPropertyChanging
				Me._number = value
				Me.SendPropertyChanged("number")
				Me.OnnumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_goalNum", DbType:="BigInt")>  _
	Public Property goalNum() As System.Nullable(Of Long)
		Get
			Return Me._goalNum
		End Get
		Set
			If (Me._goalNum.Equals(value) = false) Then
				If Me._goal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OngoalNumChanging(value)
				Me.SendPropertyChanging
				Me._goalNum = value
				Me.SendPropertyChanged("goalNum")
				Me.OngoalNumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sEmail", DbType:="NVarChar(50)")>  _
	Public Property sEmail() As String
		Get
			Return Me._sEmail
		End Get
		Set
			If (String.Equals(Me._sEmail, value) = false) Then
				Me.OnsEmailChanging(value)
				Me.SendPropertyChanging
				Me._sEmail = value
				Me.SendPropertyChanged("sEmail")
				Me.OnsEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="goal_noSupport", Storage:="_goal", ThisKey:="goalNum", OtherKey:="goalNumber", IsForeignKey:=true)>  _
	Public Property goal() As goal
		Get
			Return Me._goal.Entity
		End Get
		Set
			Dim previousValue As goal = Me._goal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._goal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._goal.Entity = Nothing
					previousValue.noSupports.Remove(Me)
				End If
				Me._goal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.noSupports.Add(Me)
					Me._goalNum = value.goalNumber
				Else
					Me._goalNum = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("goal")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="bobpar.askSupport")>  _
Partial Public Class askSupport
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _number As Long
	
	Private _goalNum As System.Nullable(Of Long)
	
	Private _sEmail As String
	
	Private _goal As EntityRef(Of goal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnnumberChanging(value As Long)
    End Sub
    Partial Private Sub OnnumberChanged()
    End Sub
    Partial Private Sub OngoalNumChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OngoalNumChanged()
    End Sub
    Partial Private Sub OnsEmailChanging(value As String)
    End Sub
    Partial Private Sub OnsEmailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._goal = CType(Nothing, EntityRef(Of goal))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_number", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property number() As Long
		Get
			Return Me._number
		End Get
		Set
			If ((Me._number = value)  _
						= false) Then
				Me.OnnumberChanging(value)
				Me.SendPropertyChanging
				Me._number = value
				Me.SendPropertyChanged("number")
				Me.OnnumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_goalNum", DbType:="BigInt")>  _
	Public Property goalNum() As System.Nullable(Of Long)
		Get
			Return Me._goalNum
		End Get
		Set
			If (Me._goalNum.Equals(value) = false) Then
				If Me._goal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OngoalNumChanging(value)
				Me.SendPropertyChanging
				Me._goalNum = value
				Me.SendPropertyChanged("goalNum")
				Me.OngoalNumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sEmail", DbType:="NVarChar(50)")>  _
	Public Property sEmail() As String
		Get
			Return Me._sEmail
		End Get
		Set
			If (String.Equals(Me._sEmail, value) = false) Then
				Me.OnsEmailChanging(value)
				Me.SendPropertyChanging
				Me._sEmail = value
				Me.SendPropertyChanged("sEmail")
				Me.OnsEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="goal_askSupport", Storage:="_goal", ThisKey:="goalNum", OtherKey:="goalNumber", IsForeignKey:=true)>  _
	Public Property goal() As goal
		Get
			Return Me._goal.Entity
		End Get
		Set
			Dim previousValue As goal = Me._goal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._goal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._goal.Entity = Nothing
					previousValue.askSupports.Remove(Me)
				End If
				Me._goal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.askSupports.Add(Me)
					Me._goalNum = value.goalNumber
				Else
					Me._goalNum = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("goal")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.emailtrack")>  _
Partial Public Class emailtrack
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _eNumber As Long
	
	Private _goalNum As System.Nullable(Of Long)
	
	Private _actNum As System.Nullable(Of Long)
	
	Private _email As String
	
	Private _processed As System.Nullable(Of Integer)
	
	Private _refNumber As System.Nullable(Of Long)
	
	Private _type As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OneNumberChanging(value As Long)
    End Sub
    Partial Private Sub OneNumberChanged()
    End Sub
    Partial Private Sub OngoalNumChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OngoalNumChanged()
    End Sub
    Partial Private Sub OnactNumChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnactNumChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OnprocessedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnprocessedChanged()
    End Sub
    Partial Private Sub OnrefNumberChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnrefNumberChanged()
    End Sub
    Partial Private Sub OntypeChanging(value As String)
    End Sub
    Partial Private Sub OntypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eNumber", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property eNumber() As Long
		Get
			Return Me._eNumber
		End Get
		Set
			If ((Me._eNumber = value)  _
						= false) Then
				Me.OneNumberChanging(value)
				Me.SendPropertyChanging
				Me._eNumber = value
				Me.SendPropertyChanged("eNumber")
				Me.OneNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_goalNum", DbType:="BigInt")>  _
	Public Property goalNum() As System.Nullable(Of Long)
		Get
			Return Me._goalNum
		End Get
		Set
			If (Me._goalNum.Equals(value) = false) Then
				Me.OngoalNumChanging(value)
				Me.SendPropertyChanging
				Me._goalNum = value
				Me.SendPropertyChanged("goalNum")
				Me.OngoalNumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_actNum", DbType:="BigInt")>  _
	Public Property actNum() As System.Nullable(Of Long)
		Get
			Return Me._actNum
		End Get
		Set
			If (Me._actNum.Equals(value) = false) Then
				Me.OnactNumChanging(value)
				Me.SendPropertyChanging
				Me._actNum = value
				Me.SendPropertyChanged("actNum")
				Me.OnactNumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="NVarChar(50)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_processed", DbType:="Int")>  _
	Public Property processed() As System.Nullable(Of Integer)
		Get
			Return Me._processed
		End Get
		Set
			If (Me._processed.Equals(value) = false) Then
				Me.OnprocessedChanging(value)
				Me.SendPropertyChanging
				Me._processed = value
				Me.SendPropertyChanged("processed")
				Me.OnprocessedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_refNumber", DbType:="BigInt")>  _
	Public Property refNumber() As System.Nullable(Of Long)
		Get
			Return Me._refNumber
		End Get
		Set
			If (Me._refNumber.Equals(value) = false) Then
				Me.OnrefNumberChanging(value)
				Me.SendPropertyChanging
				Me._refNumber = value
				Me.SendPropertyChanged("refNumber")
				Me.OnrefNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_type", DbType:="NChar(10)")>  _
	Public Property type() As String
		Get
			Return Me._type
		End Get
		Set
			If (String.Equals(Me._type, value) = false) Then
				Me.OntypeChanging(value)
				Me.SendPropertyChanging
				Me._type = value
				Me.SendPropertyChanged("type")
				Me.OntypeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.achievement")>  _
Partial Public Class achievement
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _achNumber As Long
	
	Private _userName As String
	
	Private _compDate As String
	
	Private _type As String
	
	Private _title As String
	
	Private _goalNum As String
	
	Private _actNum As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnachNumberChanging(value As Long)
    End Sub
    Partial Private Sub OnachNumberChanged()
    End Sub
    Partial Private Sub OnuserNameChanging(value As String)
    End Sub
    Partial Private Sub OnuserNameChanged()
    End Sub
    Partial Private Sub OncompDateChanging(value As String)
    End Sub
    Partial Private Sub OncompDateChanged()
    End Sub
    Partial Private Sub OntypeChanging(value As String)
    End Sub
    Partial Private Sub OntypeChanged()
    End Sub
    Partial Private Sub OntitleChanging(value As String)
    End Sub
    Partial Private Sub OntitleChanged()
    End Sub
    Partial Private Sub OngoalNumChanging(value As String)
    End Sub
    Partial Private Sub OngoalNumChanged()
    End Sub
    Partial Private Sub OnactNumChanging(value As String)
    End Sub
    Partial Private Sub OnactNumChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_achNumber", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property achNumber() As Long
		Get
			Return Me._achNumber
		End Get
		Set
			If ((Me._achNumber = value)  _
						= false) Then
				Me.OnachNumberChanging(value)
				Me.SendPropertyChanging
				Me._achNumber = value
				Me.SendPropertyChanged("achNumber")
				Me.OnachNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me.OnuserNameChanging(value)
				Me.SendPropertyChanging
				Me._userName = value
				Me.SendPropertyChanged("userName")
				Me.OnuserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_compDate", DbType:="NChar(10)")>  _
	Public Property compDate() As String
		Get
			Return Me._compDate
		End Get
		Set
			If (String.Equals(Me._compDate, value) = false) Then
				Me.OncompDateChanging(value)
				Me.SendPropertyChanging
				Me._compDate = value
				Me.SendPropertyChanged("compDate")
				Me.OncompDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_type", DbType:="NVarChar(50)")>  _
	Public Property type() As String
		Get
			Return Me._type
		End Get
		Set
			If (String.Equals(Me._type, value) = false) Then
				Me.OntypeChanging(value)
				Me.SendPropertyChanging
				Me._type = value
				Me.SendPropertyChanged("type")
				Me.OntypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_title", DbType:="NVarChar(50)")>  _
	Public Property title() As String
		Get
			Return Me._title
		End Get
		Set
			If (String.Equals(Me._title, value) = false) Then
				Me.OntitleChanging(value)
				Me.SendPropertyChanging
				Me._title = value
				Me.SendPropertyChanged("title")
				Me.OntitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_goalNum", DbType:="NVarChar(50)")>  _
	Public Property goalNum() As String
		Get
			Return Me._goalNum
		End Get
		Set
			If (String.Equals(Me._goalNum, value) = false) Then
				Me.OngoalNumChanging(value)
				Me.SendPropertyChanging
				Me._goalNum = value
				Me.SendPropertyChanged("goalNum")
				Me.OngoalNumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_actNum", DbType:="NVarChar(50)")>  _
	Public Property actNum() As String
		Get
			Return Me._actNum
		End Get
		Set
			If (String.Equals(Me._actNum, value) = false) Then
				Me.OnactNumChanging(value)
				Me.SendPropertyChanging
				Me._actNum = value
				Me.SendPropertyChanged("actNum")
				Me.OnactNumChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="bobpar.activities")>  _
Partial Public Class activity
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _actNumber As Long
	
	Private _goalNumber As System.Nullable(Of Long)
	
	Private _sequence As System.Nullable(Of Long)
	
	Private _actTitle As String
	
	Private _actDesc As String
	
	Private _good As String
	
	Private _bad As String
	
	Private _actDate As String
	
	Private _startTime As String
	
	Private _stopTime As String
	
	Private _timeDiff As String
	
	Private _status As String
	
	Private _customFieldNumber As System.Nullable(Of Long)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnactNumberChanging(value As Long)
    End Sub
    Partial Private Sub OnactNumberChanged()
    End Sub
    Partial Private Sub OngoalNumberChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OngoalNumberChanged()
    End Sub
    Partial Private Sub OnsequenceChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnsequenceChanged()
    End Sub
    Partial Private Sub OnactTitleChanging(value As String)
    End Sub
    Partial Private Sub OnactTitleChanged()
    End Sub
    Partial Private Sub OnactDescChanging(value As String)
    End Sub
    Partial Private Sub OnactDescChanged()
    End Sub
    Partial Private Sub OngoodChanging(value As String)
    End Sub
    Partial Private Sub OngoodChanged()
    End Sub
    Partial Private Sub OnbadChanging(value As String)
    End Sub
    Partial Private Sub OnbadChanged()
    End Sub
    Partial Private Sub OnactDateChanging(value As String)
    End Sub
    Partial Private Sub OnactDateChanged()
    End Sub
    Partial Private Sub OnstartTimeChanging(value As String)
    End Sub
    Partial Private Sub OnstartTimeChanged()
    End Sub
    Partial Private Sub OnstopTimeChanging(value As String)
    End Sub
    Partial Private Sub OnstopTimeChanged()
    End Sub
    Partial Private Sub OntimeDiffChanging(value As String)
    End Sub
    Partial Private Sub OntimeDiffChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OncustomFieldNumberChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OncustomFieldNumberChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_actNumber", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property actNumber() As Long
		Get
			Return Me._actNumber
		End Get
		Set
			If ((Me._actNumber = value)  _
						= false) Then
				Me.OnactNumberChanging(value)
				Me.SendPropertyChanging
				Me._actNumber = value
				Me.SendPropertyChanged("actNumber")
				Me.OnactNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_goalNumber", DbType:="BigInt")>  _
	Public Property goalNumber() As System.Nullable(Of Long)
		Get
			Return Me._goalNumber
		End Get
		Set
			If (Me._goalNumber.Equals(value) = false) Then
				Me.OngoalNumberChanging(value)
				Me.SendPropertyChanging
				Me._goalNumber = value
				Me.SendPropertyChanged("goalNumber")
				Me.OngoalNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sequence", DbType:="BigInt")>  _
	Public Property sequence() As System.Nullable(Of Long)
		Get
			Return Me._sequence
		End Get
		Set
			If (Me._sequence.Equals(value) = false) Then
				Me.OnsequenceChanging(value)
				Me.SendPropertyChanging
				Me._sequence = value
				Me.SendPropertyChanged("sequence")
				Me.OnsequenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_actTitle", DbType:="NVarChar(MAX)")>  _
	Public Property actTitle() As String
		Get
			Return Me._actTitle
		End Get
		Set
			If (String.Equals(Me._actTitle, value) = false) Then
				Me.OnactTitleChanging(value)
				Me.SendPropertyChanging
				Me._actTitle = value
				Me.SendPropertyChanged("actTitle")
				Me.OnactTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_actDesc", DbType:="NVarChar(MAX)")>  _
	Public Property actDesc() As String
		Get
			Return Me._actDesc
		End Get
		Set
			If (String.Equals(Me._actDesc, value) = false) Then
				Me.OnactDescChanging(value)
				Me.SendPropertyChanging
				Me._actDesc = value
				Me.SendPropertyChanged("actDesc")
				Me.OnactDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_good", DbType:="NVarChar(MAX)")>  _
	Public Property good() As String
		Get
			Return Me._good
		End Get
		Set
			If (String.Equals(Me._good, value) = false) Then
				Me.OngoodChanging(value)
				Me.SendPropertyChanging
				Me._good = value
				Me.SendPropertyChanged("good")
				Me.OngoodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bad", DbType:="NVarChar(MAX)")>  _
	Public Property bad() As String
		Get
			Return Me._bad
		End Get
		Set
			If (String.Equals(Me._bad, value) = false) Then
				Me.OnbadChanging(value)
				Me.SendPropertyChanging
				Me._bad = value
				Me.SendPropertyChanged("bad")
				Me.OnbadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_actDate", DbType:="NVarChar(50)")>  _
	Public Property actDate() As String
		Get
			Return Me._actDate
		End Get
		Set
			If (String.Equals(Me._actDate, value) = false) Then
				Me.OnactDateChanging(value)
				Me.SendPropertyChanging
				Me._actDate = value
				Me.SendPropertyChanged("actDate")
				Me.OnactDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="NVarChar(50)")>  _
	Public Property startTime() As String
		Get
			Return Me._startTime
		End Get
		Set
			If (String.Equals(Me._startTime, value) = false) Then
				Me.OnstartTimeChanging(value)
				Me.SendPropertyChanging
				Me._startTime = value
				Me.SendPropertyChanged("startTime")
				Me.OnstartTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stopTime", DbType:="NVarChar(50)")>  _
	Public Property stopTime() As String
		Get
			Return Me._stopTime
		End Get
		Set
			If (String.Equals(Me._stopTime, value) = false) Then
				Me.OnstopTimeChanging(value)
				Me.SendPropertyChanging
				Me._stopTime = value
				Me.SendPropertyChanged("stopTime")
				Me.OnstopTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeDiff", DbType:="NVarChar(50)")>  _
	Public Property timeDiff() As String
		Get
			Return Me._timeDiff
		End Get
		Set
			If (String.Equals(Me._timeDiff, value) = false) Then
				Me.OntimeDiffChanging(value)
				Me.SendPropertyChanging
				Me._timeDiff = value
				Me.SendPropertyChanged("timeDiff")
				Me.OntimeDiffChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="NVarChar(MAX)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customFieldNumber", DbType:="BigInt")>  _
	Public Property customFieldNumber() As System.Nullable(Of Long)
		Get
			Return Me._customFieldNumber
		End Get
		Set
			If (Me._customFieldNumber.Equals(value) = false) Then
				Me.OncustomFieldNumberChanging(value)
				Me.SendPropertyChanging
				Me._customFieldNumber = value
				Me.SendPropertyChanged("customFieldNumber")
				Me.OncustomFieldNumberChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.activityFieldData")>  _
Partial Public Class activityFieldData
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _actFieldNum As Long
	
	Private _name As String
	
	Private _data As String
	
	Private _actNum As System.Nullable(Of Long)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnactFieldNumChanging(value As Long)
    End Sub
    Partial Private Sub OnactFieldNumChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OndataChanging(value As String)
    End Sub
    Partial Private Sub OndataChanged()
    End Sub
    Partial Private Sub OnactNumChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnactNumChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_actFieldNum", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property actFieldNum() As Long
		Get
			Return Me._actFieldNum
		End Get
		Set
			If ((Me._actFieldNum = value)  _
						= false) Then
				Me.OnactFieldNumChanging(value)
				Me.SendPropertyChanging
				Me._actFieldNum = value
				Me.SendPropertyChanged("actFieldNum")
				Me.OnactFieldNumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="NVarChar(50)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_data", DbType:="NVarChar(MAX)")>  _
	Public Property data() As String
		Get
			Return Me._data
		End Get
		Set
			If (String.Equals(Me._data, value) = false) Then
				Me.OndataChanging(value)
				Me.SendPropertyChanging
				Me._data = value
				Me.SendPropertyChanged("data")
				Me.OndataChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_actNum", DbType:="BigInt")>  _
	Public Property actNum() As System.Nullable(Of Long)
		Get
			Return Me._actNum
		End Get
		Set
			If (Me._actNum.Equals(value) = false) Then
				Me.OnactNumChanging(value)
				Me.SendPropertyChanging
				Me._actNum = value
				Me.SendPropertyChanged("actNum")
				Me.OnactNumChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="bobpar.activityResponse")>  _
Partial Public Class activityResponse
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _responseNumber As Long
	
	Private _actNumber As System.Nullable(Of Long)
	
	Private _sNumber As System.Nullable(Of Short)
	
	Private _pfResult As System.Nullable(Of Short)
	
	Private _response As String
	
	Private _goalNumber As System.Nullable(Of Long)
	
	Private _type As String
	
	Private _userName As String
	
	Private _rDate As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnresponseNumberChanging(value As Long)
    End Sub
    Partial Private Sub OnresponseNumberChanged()
    End Sub
    Partial Private Sub OnactNumberChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnactNumberChanged()
    End Sub
    Partial Private Sub OnsNumberChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnsNumberChanged()
    End Sub
    Partial Private Sub OnpfResultChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnpfResultChanged()
    End Sub
    Partial Private Sub OnresponseChanging(value As String)
    End Sub
    Partial Private Sub OnresponseChanged()
    End Sub
    Partial Private Sub OngoalNumberChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OngoalNumberChanged()
    End Sub
    Partial Private Sub OntypeChanging(value As String)
    End Sub
    Partial Private Sub OntypeChanged()
    End Sub
    Partial Private Sub OnuserNameChanging(value As String)
    End Sub
    Partial Private Sub OnuserNameChanged()
    End Sub
    Partial Private Sub OnrDateChanging(value As String)
    End Sub
    Partial Private Sub OnrDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_responseNumber", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property responseNumber() As Long
		Get
			Return Me._responseNumber
		End Get
		Set
			If ((Me._responseNumber = value)  _
						= false) Then
				Me.OnresponseNumberChanging(value)
				Me.SendPropertyChanging
				Me._responseNumber = value
				Me.SendPropertyChanged("responseNumber")
				Me.OnresponseNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_actNumber", DbType:="BigInt")>  _
	Public Property actNumber() As System.Nullable(Of Long)
		Get
			Return Me._actNumber
		End Get
		Set
			If (Me._actNumber.Equals(value) = false) Then
				Me.OnactNumberChanging(value)
				Me.SendPropertyChanging
				Me._actNumber = value
				Me.SendPropertyChanged("actNumber")
				Me.OnactNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sNumber", DbType:="SmallInt")>  _
	Public Property sNumber() As System.Nullable(Of Short)
		Get
			Return Me._sNumber
		End Get
		Set
			If (Me._sNumber.Equals(value) = false) Then
				Me.OnsNumberChanging(value)
				Me.SendPropertyChanging
				Me._sNumber = value
				Me.SendPropertyChanged("sNumber")
				Me.OnsNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pfResult", DbType:="SmallInt")>  _
	Public Property pfResult() As System.Nullable(Of Short)
		Get
			Return Me._pfResult
		End Get
		Set
			If (Me._pfResult.Equals(value) = false) Then
				Me.OnpfResultChanging(value)
				Me.SendPropertyChanging
				Me._pfResult = value
				Me.SendPropertyChanged("pfResult")
				Me.OnpfResultChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_response", DbType:="NVarChar(MAX)")>  _
	Public Property response() As String
		Get
			Return Me._response
		End Get
		Set
			If (String.Equals(Me._response, value) = false) Then
				Me.OnresponseChanging(value)
				Me.SendPropertyChanging
				Me._response = value
				Me.SendPropertyChanged("response")
				Me.OnresponseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_goalNumber", DbType:="BigInt")>  _
	Public Property goalNumber() As System.Nullable(Of Long)
		Get
			Return Me._goalNumber
		End Get
		Set
			If (Me._goalNumber.Equals(value) = false) Then
				Me.OngoalNumberChanging(value)
				Me.SendPropertyChanging
				Me._goalNumber = value
				Me.SendPropertyChanged("goalNumber")
				Me.OngoalNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_type", DbType:="NChar(10)")>  _
	Public Property type() As String
		Get
			Return Me._type
		End Get
		Set
			If (String.Equals(Me._type, value) = false) Then
				Me.OntypeChanging(value)
				Me.SendPropertyChanging
				Me._type = value
				Me.SendPropertyChanged("type")
				Me.OntypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me.OnuserNameChanging(value)
				Me.SendPropertyChanging
				Me._userName = value
				Me.SendPropertyChanged("userName")
				Me.OnuserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rDate", DbType:="NChar(10)")>  _
	Public Property rDate() As String
		Get
			Return Me._rDate
		End Get
		Set
			If (String.Equals(Me._rDate, value) = false) Then
				Me.OnrDateChanging(value)
				Me.SendPropertyChanging
				Me._rDate = value
				Me.SendPropertyChanged("rDate")
				Me.OnrDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.achievementList")>  _
Partial Public Class achievementList
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _achNum As Long
	
	Private _title As String
	
	Private _type As String
	
	Private _desc As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnachNumChanging(value As Long)
    End Sub
    Partial Private Sub OnachNumChanged()
    End Sub
    Partial Private Sub OntitleChanging(value As String)
    End Sub
    Partial Private Sub OntitleChanged()
    End Sub
    Partial Private Sub OntypeChanging(value As String)
    End Sub
    Partial Private Sub OntypeChanged()
    End Sub
    Partial Private Sub OndescChanging(value As String)
    End Sub
    Partial Private Sub OndescChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_achNum", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property achNum() As Long
		Get
			Return Me._achNum
		End Get
		Set
			If ((Me._achNum = value)  _
						= false) Then
				Me.OnachNumChanging(value)
				Me.SendPropertyChanging
				Me._achNum = value
				Me.SendPropertyChanged("achNum")
				Me.OnachNumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_title", DbType:="NVarChar(50)")>  _
	Public Property title() As String
		Get
			Return Me._title
		End Get
		Set
			If (String.Equals(Me._title, value) = false) Then
				Me.OntitleChanging(value)
				Me.SendPropertyChanging
				Me._title = value
				Me.SendPropertyChanged("title")
				Me.OntitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_type", DbType:="NVarChar(50)")>  _
	Public Property type() As String
		Get
			Return Me._type
		End Get
		Set
			If (String.Equals(Me._type, value) = false) Then
				Me.OntypeChanging(value)
				Me.SendPropertyChanging
				Me._type = value
				Me.SendPropertyChanged("type")
				Me.OntypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[desc]", Storage:="_desc", DbType:="NVarChar(MAX)")>  _
	Public Property desc() As String
		Get
			Return Me._desc
		End Get
		Set
			If (String.Equals(Me._desc, value) = false) Then
				Me.OndescChanging(value)
				Me.SendPropertyChanging
				Me._desc = value
				Me.SendPropertyChanged("desc")
				Me.OndescChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="bobpar.activityPictures")>  _
Partial Public Class activityPicture
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _pictureNumber As Long
	
	Private _actNumber As System.Nullable(Of Long)
	
	Private _pictureLocation As String
	
	Private _picDesc As String
	
	Private _goalNumber As System.Nullable(Of Long)
	
	Private _date As String
	
	Private _shareSetting As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnpictureNumberChanging(value As Long)
    End Sub
    Partial Private Sub OnpictureNumberChanged()
    End Sub
    Partial Private Sub OnactNumberChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnactNumberChanged()
    End Sub
    Partial Private Sub OnpictureLocationChanging(value As String)
    End Sub
    Partial Private Sub OnpictureLocationChanged()
    End Sub
    Partial Private Sub OnpicDescChanging(value As String)
    End Sub
    Partial Private Sub OnpicDescChanged()
    End Sub
    Partial Private Sub OngoalNumberChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OngoalNumberChanged()
    End Sub
    Partial Private Sub OndateChanging(value As String)
    End Sub
    Partial Private Sub OndateChanged()
    End Sub
    Partial Private Sub OnshareSettingChanging(value As String)
    End Sub
    Partial Private Sub OnshareSettingChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pictureNumber", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property pictureNumber() As Long
		Get
			Return Me._pictureNumber
		End Get
		Set
			If ((Me._pictureNumber = value)  _
						= false) Then
				Me.OnpictureNumberChanging(value)
				Me.SendPropertyChanging
				Me._pictureNumber = value
				Me.SendPropertyChanged("pictureNumber")
				Me.OnpictureNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_actNumber", DbType:="BigInt")>  _
	Public Property actNumber() As System.Nullable(Of Long)
		Get
			Return Me._actNumber
		End Get
		Set
			If (Me._actNumber.Equals(value) = false) Then
				Me.OnactNumberChanging(value)
				Me.SendPropertyChanging
				Me._actNumber = value
				Me.SendPropertyChanged("actNumber")
				Me.OnactNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pictureLocation", DbType:="NVarChar(MAX)")>  _
	Public Property pictureLocation() As String
		Get
			Return Me._pictureLocation
		End Get
		Set
			If (String.Equals(Me._pictureLocation, value) = false) Then
				Me.OnpictureLocationChanging(value)
				Me.SendPropertyChanging
				Me._pictureLocation = value
				Me.SendPropertyChanged("pictureLocation")
				Me.OnpictureLocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_picDesc", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property picDesc() As String
		Get
			Return Me._picDesc
		End Get
		Set
			If (String.Equals(Me._picDesc, value) = false) Then
				Me.OnpicDescChanging(value)
				Me.SendPropertyChanging
				Me._picDesc = value
				Me.SendPropertyChanged("picDesc")
				Me.OnpicDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_goalNumber", DbType:="BigInt")>  _
	Public Property goalNumber() As System.Nullable(Of Long)
		Get
			Return Me._goalNumber
		End Get
		Set
			If (Me._goalNumber.Equals(value) = false) Then
				Me.OngoalNumberChanging(value)
				Me.SendPropertyChanging
				Me._goalNumber = value
				Me.SendPropertyChanged("goalNumber")
				Me.OngoalNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="date", Storage:="_date", DbType:="NVarChar(50)")>  _
	Public Property [date]() As String
		Get
			Return Me._date
		End Get
		Set
			If (String.Equals(Me._date, value) = false) Then
				Me.OndateChanging(value)
				Me.SendPropertyChanging
				Me._date = value
				Me.SendPropertyChanged("[date]")
				Me.OndateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shareSetting", DbType:="NVarChar(50)")>  _
	Public Property shareSetting() As String
		Get
			Return Me._shareSetting
		End Get
		Set
			If (String.Equals(Me._shareSetting, value) = false) Then
				Me.OnshareSettingChanging(value)
				Me.SendPropertyChanging
				Me._shareSetting = value
				Me.SendPropertyChanged("shareSetting")
				Me.OnshareSettingChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.goalHistory")>  _
Partial Public Class goalHistory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _goalNumber As System.Nullable(Of Long)
	
	Private _goalTitle As String
	
	Private _timeLength As String
	
	Private _timeUnit As String
	
	Private _goalDesc As String
	
	Private _frequency As String
	
	Private _frequencyUnit As String
	
	Private _modifyDate As String
	
	Private _version As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OngoalNumberChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OngoalNumberChanged()
    End Sub
    Partial Private Sub OngoalTitleChanging(value As String)
    End Sub
    Partial Private Sub OngoalTitleChanged()
    End Sub
    Partial Private Sub OntimeLengthChanging(value As String)
    End Sub
    Partial Private Sub OntimeLengthChanged()
    End Sub
    Partial Private Sub OntimeUnitChanging(value As String)
    End Sub
    Partial Private Sub OntimeUnitChanged()
    End Sub
    Partial Private Sub OngoalDescChanging(value As String)
    End Sub
    Partial Private Sub OngoalDescChanged()
    End Sub
    Partial Private Sub OnfrequencyChanging(value As String)
    End Sub
    Partial Private Sub OnfrequencyChanged()
    End Sub
    Partial Private Sub OnfrequencyUnitChanging(value As String)
    End Sub
    Partial Private Sub OnfrequencyUnitChanged()
    End Sub
    Partial Private Sub OnmodifyDateChanging(value As String)
    End Sub
    Partial Private Sub OnmodifyDateChanged()
    End Sub
    Partial Private Sub OnversionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnversionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_goalNumber", DbType:="BigInt")>  _
	Public Property goalNumber() As System.Nullable(Of Long)
		Get
			Return Me._goalNumber
		End Get
		Set
			If (Me._goalNumber.Equals(value) = false) Then
				Me.OngoalNumberChanging(value)
				Me.SendPropertyChanging
				Me._goalNumber = value
				Me.SendPropertyChanged("goalNumber")
				Me.OngoalNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_goalTitle", DbType:="NVarChar(MAX)")>  _
	Public Property goalTitle() As String
		Get
			Return Me._goalTitle
		End Get
		Set
			If (String.Equals(Me._goalTitle, value) = false) Then
				Me.OngoalTitleChanging(value)
				Me.SendPropertyChanging
				Me._goalTitle = value
				Me.SendPropertyChanged("goalTitle")
				Me.OngoalTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeLength", DbType:="NVarChar(MAX)")>  _
	Public Property timeLength() As String
		Get
			Return Me._timeLength
		End Get
		Set
			If (String.Equals(Me._timeLength, value) = false) Then
				Me.OntimeLengthChanging(value)
				Me.SendPropertyChanging
				Me._timeLength = value
				Me.SendPropertyChanged("timeLength")
				Me.OntimeLengthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeUnit", DbType:="NVarChar(MAX)")>  _
	Public Property timeUnit() As String
		Get
			Return Me._timeUnit
		End Get
		Set
			If (String.Equals(Me._timeUnit, value) = false) Then
				Me.OntimeUnitChanging(value)
				Me.SendPropertyChanging
				Me._timeUnit = value
				Me.SendPropertyChanged("timeUnit")
				Me.OntimeUnitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_goalDesc", DbType:="NVarChar(MAX)")>  _
	Public Property goalDesc() As String
		Get
			Return Me._goalDesc
		End Get
		Set
			If (String.Equals(Me._goalDesc, value) = false) Then
				Me.OngoalDescChanging(value)
				Me.SendPropertyChanging
				Me._goalDesc = value
				Me.SendPropertyChanged("goalDesc")
				Me.OngoalDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_frequency", DbType:="NVarChar(MAX)")>  _
	Public Property frequency() As String
		Get
			Return Me._frequency
		End Get
		Set
			If (String.Equals(Me._frequency, value) = false) Then
				Me.OnfrequencyChanging(value)
				Me.SendPropertyChanging
				Me._frequency = value
				Me.SendPropertyChanged("frequency")
				Me.OnfrequencyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_frequencyUnit", DbType:="NVarChar(MAX)")>  _
	Public Property frequencyUnit() As String
		Get
			Return Me._frequencyUnit
		End Get
		Set
			If (String.Equals(Me._frequencyUnit, value) = false) Then
				Me.OnfrequencyUnitChanging(value)
				Me.SendPropertyChanging
				Me._frequencyUnit = value
				Me.SendPropertyChanged("frequencyUnit")
				Me.OnfrequencyUnitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifyDate", DbType:="NVarChar(50)")>  _
	Public Property modifyDate() As String
		Get
			Return Me._modifyDate
		End Get
		Set
			If (String.Equals(Me._modifyDate, value) = false) Then
				Me.OnmodifyDateChanging(value)
				Me.SendPropertyChanging
				Me._modifyDate = value
				Me.SendPropertyChanged("modifyDate")
				Me.OnmodifyDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_version", DbType:="Int")>  _
	Public Property version() As System.Nullable(Of Integer)
		Get
			Return Me._version
		End Get
		Set
			If (Me._version.Equals(value) = false) Then
				Me.OnversionChanging(value)
				Me.SendPropertyChanging
				Me._version = value
				Me.SendPropertyChanged("version")
				Me.OnversionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.activityFields")>  _
Partial Public Class activityField
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _fieldNum As Long
	
	Private _fieldNames As String
	
	Private _goalNum As System.Nullable(Of Long)
	
	Private _modified As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnfieldNumChanging(value As Long)
    End Sub
    Partial Private Sub OnfieldNumChanged()
    End Sub
    Partial Private Sub OnfieldNamesChanging(value As String)
    End Sub
    Partial Private Sub OnfieldNamesChanged()
    End Sub
    Partial Private Sub OngoalNumChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OngoalNumChanged()
    End Sub
    Partial Private Sub OnmodifiedChanging(value As String)
    End Sub
    Partial Private Sub OnmodifiedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fieldNum", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property fieldNum() As Long
		Get
			Return Me._fieldNum
		End Get
		Set
			If ((Me._fieldNum = value)  _
						= false) Then
				Me.OnfieldNumChanging(value)
				Me.SendPropertyChanging
				Me._fieldNum = value
				Me.SendPropertyChanged("fieldNum")
				Me.OnfieldNumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fieldNames", DbType:="NVarChar(MAX)")>  _
	Public Property fieldNames() As String
		Get
			Return Me._fieldNames
		End Get
		Set
			If (String.Equals(Me._fieldNames, value) = false) Then
				Me.OnfieldNamesChanging(value)
				Me.SendPropertyChanging
				Me._fieldNames = value
				Me.SendPropertyChanged("fieldNames")
				Me.OnfieldNamesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_goalNum", DbType:="BigInt")>  _
	Public Property goalNum() As System.Nullable(Of Long)
		Get
			Return Me._goalNum
		End Get
		Set
			If (Me._goalNum.Equals(value) = false) Then
				Me.OngoalNumChanging(value)
				Me.SendPropertyChanging
				Me._goalNum = value
				Me.SendPropertyChanged("goalNum")
				Me.OngoalNumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modified", DbType:="NChar(10)")>  _
	Public Property modified() As String
		Get
			Return Me._modified
		End Get
		Set
			If (String.Equals(Me._modified, value) = false) Then
				Me.OnmodifiedChanging(value)
				Me.SendPropertyChanging
				Me._modified = value
				Me.SendPropertyChanged("modified")
				Me.OnmodifiedChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.activityFieldsHistory")>  _
Partial Public Class activityFieldsHistory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _fieldNum As Long
	
	Private _fieldNames As String
	
	Private _goalNum As System.Nullable(Of Long)
	
	Private _version As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnfieldNumChanging(value As Long)
    End Sub
    Partial Private Sub OnfieldNumChanged()
    End Sub
    Partial Private Sub OnfieldNamesChanging(value As String)
    End Sub
    Partial Private Sub OnfieldNamesChanged()
    End Sub
    Partial Private Sub OngoalNumChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OngoalNumChanged()
    End Sub
    Partial Private Sub OnversionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnversionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fieldNum", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property fieldNum() As Long
		Get
			Return Me._fieldNum
		End Get
		Set
			If ((Me._fieldNum = value)  _
						= false) Then
				Me.OnfieldNumChanging(value)
				Me.SendPropertyChanging
				Me._fieldNum = value
				Me.SendPropertyChanged("fieldNum")
				Me.OnfieldNumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fieldNames", DbType:="NVarChar(MAX)")>  _
	Public Property fieldNames() As String
		Get
			Return Me._fieldNames
		End Get
		Set
			If (String.Equals(Me._fieldNames, value) = false) Then
				Me.OnfieldNamesChanging(value)
				Me.SendPropertyChanging
				Me._fieldNames = value
				Me.SendPropertyChanged("fieldNames")
				Me.OnfieldNamesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_goalNum", DbType:="BigInt")>  _
	Public Property goalNum() As System.Nullable(Of Long)
		Get
			Return Me._goalNum
		End Get
		Set
			If (Me._goalNum.Equals(value) = false) Then
				Me.OngoalNumChanging(value)
				Me.SendPropertyChanging
				Me._goalNum = value
				Me.SendPropertyChanged("goalNum")
				Me.OngoalNumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_version", DbType:="Int")>  _
	Public Property version() As System.Nullable(Of Integer)
		Get
			Return Me._version
		End Get
		Set
			If (Me._version.Equals(value) = false) Then
				Me.OnversionChanging(value)
				Me.SendPropertyChanging
				Me._version = value
				Me.SendPropertyChanged("version")
				Me.OnversionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="bobpar.goals")>  _
Partial Public Class goal
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _goalNumber As Long
	
	Private _userName As String
	
	Private _goalTitle As String
	
	Private _goalDueDate As String
	
	Private _scheduleDays As String
	
	Private _timeLength As String
	
	Private _timeUnit As String
	
	Private _goalDesc As String
	
	Private _status As String
	
	Private _completeDate As String
	
	Private _frequency As String
	
	Private _frequencyUnit As String
	
	Private _customFields As String
	
	Private _public As String
	
	Private _modified As System.Nullable(Of Boolean)
	
	Private _createDate As String
	
	Private _goalSupports As EntitySet(Of goalSupport)
	
	Private _noSupports As EntitySet(Of noSupport)
	
	Private _askSupports As EntitySet(Of askSupport)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OngoalNumberChanging(value As Long)
    End Sub
    Partial Private Sub OngoalNumberChanged()
    End Sub
    Partial Private Sub OnuserNameChanging(value As String)
    End Sub
    Partial Private Sub OnuserNameChanged()
    End Sub
    Partial Private Sub OngoalTitleChanging(value As String)
    End Sub
    Partial Private Sub OngoalTitleChanged()
    End Sub
    Partial Private Sub OngoalDueDateChanging(value As String)
    End Sub
    Partial Private Sub OngoalDueDateChanged()
    End Sub
    Partial Private Sub OnscheduleDaysChanging(value As String)
    End Sub
    Partial Private Sub OnscheduleDaysChanged()
    End Sub
    Partial Private Sub OntimeLengthChanging(value As String)
    End Sub
    Partial Private Sub OntimeLengthChanged()
    End Sub
    Partial Private Sub OntimeUnitChanging(value As String)
    End Sub
    Partial Private Sub OntimeUnitChanged()
    End Sub
    Partial Private Sub OngoalDescChanging(value As String)
    End Sub
    Partial Private Sub OngoalDescChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OncompleteDateChanging(value As String)
    End Sub
    Partial Private Sub OncompleteDateChanged()
    End Sub
    Partial Private Sub OnfrequencyChanging(value As String)
    End Sub
    Partial Private Sub OnfrequencyChanged()
    End Sub
    Partial Private Sub OnfrequencyUnitChanging(value As String)
    End Sub
    Partial Private Sub OnfrequencyUnitChanged()
    End Sub
    Partial Private Sub OncustomFieldsChanging(value As String)
    End Sub
    Partial Private Sub OncustomFieldsChanged()
    End Sub
    Partial Private Sub OnpublicChanging(value As String)
    End Sub
    Partial Private Sub OnpublicChanged()
    End Sub
    Partial Private Sub OnmodifiedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnmodifiedChanged()
    End Sub
    Partial Private Sub OncreateDateChanging(value As String)
    End Sub
    Partial Private Sub OncreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._goalSupports = New EntitySet(Of goalSupport)(AddressOf Me.attach_goalSupports, AddressOf Me.detach_goalSupports)
		Me._noSupports = New EntitySet(Of noSupport)(AddressOf Me.attach_noSupports, AddressOf Me.detach_noSupports)
		Me._askSupports = New EntitySet(Of askSupport)(AddressOf Me.attach_askSupports, AddressOf Me.detach_askSupports)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_goalNumber", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property goalNumber() As Long
		Get
			Return Me._goalNumber
		End Get
		Set
			If ((Me._goalNumber = value)  _
						= false) Then
				Me.OngoalNumberChanging(value)
				Me.SendPropertyChanging
				Me._goalNumber = value
				Me.SendPropertyChanged("goalNumber")
				Me.OngoalNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me.OnuserNameChanging(value)
				Me.SendPropertyChanging
				Me._userName = value
				Me.SendPropertyChanged("userName")
				Me.OnuserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_goalTitle", DbType:="NVarChar(MAX)")>  _
	Public Property goalTitle() As String
		Get
			Return Me._goalTitle
		End Get
		Set
			If (String.Equals(Me._goalTitle, value) = false) Then
				Me.OngoalTitleChanging(value)
				Me.SendPropertyChanging
				Me._goalTitle = value
				Me.SendPropertyChanged("goalTitle")
				Me.OngoalTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_goalDueDate", DbType:="NVarChar(MAX)")>  _
	Public Property goalDueDate() As String
		Get
			Return Me._goalDueDate
		End Get
		Set
			If (String.Equals(Me._goalDueDate, value) = false) Then
				Me.OngoalDueDateChanging(value)
				Me.SendPropertyChanging
				Me._goalDueDate = value
				Me.SendPropertyChanged("goalDueDate")
				Me.OngoalDueDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_scheduleDays", DbType:="NVarChar(MAX)")>  _
	Public Property scheduleDays() As String
		Get
			Return Me._scheduleDays
		End Get
		Set
			If (String.Equals(Me._scheduleDays, value) = false) Then
				Me.OnscheduleDaysChanging(value)
				Me.SendPropertyChanging
				Me._scheduleDays = value
				Me.SendPropertyChanged("scheduleDays")
				Me.OnscheduleDaysChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeLength", DbType:="NVarChar(MAX)")>  _
	Public Property timeLength() As String
		Get
			Return Me._timeLength
		End Get
		Set
			If (String.Equals(Me._timeLength, value) = false) Then
				Me.OntimeLengthChanging(value)
				Me.SendPropertyChanging
				Me._timeLength = value
				Me.SendPropertyChanged("timeLength")
				Me.OntimeLengthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeUnit", DbType:="NVarChar(MAX)")>  _
	Public Property timeUnit() As String
		Get
			Return Me._timeUnit
		End Get
		Set
			If (String.Equals(Me._timeUnit, value) = false) Then
				Me.OntimeUnitChanging(value)
				Me.SendPropertyChanging
				Me._timeUnit = value
				Me.SendPropertyChanged("timeUnit")
				Me.OntimeUnitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_goalDesc", DbType:="NVarChar(MAX)")>  _
	Public Property goalDesc() As String
		Get
			Return Me._goalDesc
		End Get
		Set
			If (String.Equals(Me._goalDesc, value) = false) Then
				Me.OngoalDescChanging(value)
				Me.SendPropertyChanging
				Me._goalDesc = value
				Me.SendPropertyChanged("goalDesc")
				Me.OngoalDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="NChar(10)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_completeDate", DbType:="NVarChar(MAX)")>  _
	Public Property completeDate() As String
		Get
			Return Me._completeDate
		End Get
		Set
			If (String.Equals(Me._completeDate, value) = false) Then
				Me.OncompleteDateChanging(value)
				Me.SendPropertyChanging
				Me._completeDate = value
				Me.SendPropertyChanged("completeDate")
				Me.OncompleteDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_frequency", DbType:="NVarChar(MAX)")>  _
	Public Property frequency() As String
		Get
			Return Me._frequency
		End Get
		Set
			If (String.Equals(Me._frequency, value) = false) Then
				Me.OnfrequencyChanging(value)
				Me.SendPropertyChanging
				Me._frequency = value
				Me.SendPropertyChanged("frequency")
				Me.OnfrequencyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_frequencyUnit", DbType:="NVarChar(MAX)")>  _
	Public Property frequencyUnit() As String
		Get
			Return Me._frequencyUnit
		End Get
		Set
			If (String.Equals(Me._frequencyUnit, value) = false) Then
				Me.OnfrequencyUnitChanging(value)
				Me.SendPropertyChanging
				Me._frequencyUnit = value
				Me.SendPropertyChanged("frequencyUnit")
				Me.OnfrequencyUnitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customFields", DbType:="NChar(10)")>  _
	Public Property customFields() As String
		Get
			Return Me._customFields
		End Get
		Set
			If (String.Equals(Me._customFields, value) = false) Then
				Me.OncustomFieldsChanging(value)
				Me.SendPropertyChanging
				Me._customFields = value
				Me.SendPropertyChanged("customFields")
				Me.OncustomFieldsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_public", DbType:="NChar(10)")>  _
	Public Property [public]() As String
		Get
			Return Me._public
		End Get
		Set
			If (String.Equals(Me._public, value) = false) Then
				Me.OnpublicChanging(value)
				Me.SendPropertyChanging
				Me._public = value
				Me.SendPropertyChanged("[public]")
				Me.OnpublicChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modified", DbType:="Bit")>  _
	Public Property modified() As System.Nullable(Of Boolean)
		Get
			Return Me._modified
		End Get
		Set
			If (Me._modified.Equals(value) = false) Then
				Me.OnmodifiedChanging(value)
				Me.SendPropertyChanging
				Me._modified = value
				Me.SendPropertyChanged("modified")
				Me.OnmodifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createDate", DbType:="NVarChar(50)")>  _
	Public Property createDate() As String
		Get
			Return Me._createDate
		End Get
		Set
			If (String.Equals(Me._createDate, value) = false) Then
				Me.OncreateDateChanging(value)
				Me.SendPropertyChanging
				Me._createDate = value
				Me.SendPropertyChanged("createDate")
				Me.OncreateDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="goal_goalSupport", Storage:="_goalSupports", ThisKey:="goalNumber", OtherKey:="goalNum")>  _
	Public Property goalSupports() As EntitySet(Of goalSupport)
		Get
			Return Me._goalSupports
		End Get
		Set
			Me._goalSupports.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="goal_noSupport", Storage:="_noSupports", ThisKey:="goalNumber", OtherKey:="goalNum")>  _
	Public Property noSupports() As EntitySet(Of noSupport)
		Get
			Return Me._noSupports
		End Get
		Set
			Me._noSupports.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="goal_askSupport", Storage:="_askSupports", ThisKey:="goalNumber", OtherKey:="goalNum")>  _
	Public Property askSupports() As EntitySet(Of askSupport)
		Get
			Return Me._askSupports
		End Get
		Set
			Me._askSupports.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_goalSupports(ByVal entity As goalSupport)
		Me.SendPropertyChanging
		entity.goal = Me
	End Sub
	
	Private Sub detach_goalSupports(ByVal entity As goalSupport)
		Me.SendPropertyChanging
		entity.goal = Nothing
	End Sub
	
	Private Sub attach_noSupports(ByVal entity As noSupport)
		Me.SendPropertyChanging
		entity.goal = Me
	End Sub
	
	Private Sub detach_noSupports(ByVal entity As noSupport)
		Me.SendPropertyChanging
		entity.goal = Nothing
	End Sub
	
	Private Sub attach_askSupports(ByVal entity As askSupport)
		Me.SendPropertyChanging
		entity.goal = Me
	End Sub
	
	Private Sub detach_askSupports(ByVal entity As askSupport)
		Me.SendPropertyChanging
		entity.goal = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.activityTextControl")>  _
Partial Public Class activityTextControl
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _text As String
	
	Private _actnum As String
	
	Private _listed As String
	
	Private _title As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OntextChanging(value As String)
    End Sub
    Partial Private Sub OntextChanged()
    End Sub
    Partial Private Sub OnactnumChanging(value As String)
    End Sub
    Partial Private Sub OnactnumChanged()
    End Sub
    Partial Private Sub OnlistedChanging(value As String)
    End Sub
    Partial Private Sub OnlistedChanged()
    End Sub
    Partial Private Sub OntitleChanging(value As String)
    End Sub
    Partial Private Sub OntitleChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_text", DbType:="NVarChar(MAX)")>  _
	Public Property text() As String
		Get
			Return Me._text
		End Get
		Set
			If (String.Equals(Me._text, value) = false) Then
				Me.OntextChanging(value)
				Me.SendPropertyChanging
				Me._text = value
				Me.SendPropertyChanged("text")
				Me.OntextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_actnum", DbType:="NVarChar(50)")>  _
	Public Property actnum() As String
		Get
			Return Me._actnum
		End Get
		Set
			If (String.Equals(Me._actnum, value) = false) Then
				Me.OnactnumChanging(value)
				Me.SendPropertyChanging
				Me._actnum = value
				Me.SendPropertyChanged("actnum")
				Me.OnactnumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_listed", DbType:="NVarChar(50)")>  _
	Public Property listed() As String
		Get
			Return Me._listed
		End Get
		Set
			If (String.Equals(Me._listed, value) = false) Then
				Me.OnlistedChanging(value)
				Me.SendPropertyChanging
				Me._listed = value
				Me.SendPropertyChanged("listed")
				Me.OnlistedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_title", DbType:="NVarChar(50)")>  _
	Public Property title() As String
		Get
			Return Me._title
		End Get
		Set
			If (String.Equals(Me._title, value) = false) Then
				Me.OntitleChanging(value)
				Me.SendPropertyChanging
				Me._title = value
				Me.SendPropertyChanged("title")
				Me.OntitleChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
